# GitHub Actions Workflow for Call Graph Generation
#
# 重要な設計方針:
# - フォールバック処理は実装しない
# - 問題が発生した場合は明確なエラーメッセージと共に即座に失敗させる
# - 「なんとなく動く」状態を作らず、根本原因の究明を促す
# - 設定ミスや依存関係の問題を隠蔽しない
#
# この方針により:
# - デバッグが容易になる
# - 問題の早期発見が可能になる
# - 予期しない動作を防げる
#
name: Generate Call Graph

on:
  schedule:
    # 毎日午前5時(JST) = UTC 20:00前日
    - cron: '0 20 * * *'
  workflow_dispatch: # 手動実行も可能

jobs:
  check-commits:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 50 # 過去のコミットを取得

      - name: Check for user commits in last 24 hours
        id: check
        run: |
          # 手動実行の場合は常に実行
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "Manual execution, proceeding with analysis"
            exit 0
          fi

          # 過去24時間のコミットを取得
          since=$(date -d '24 hours ago' --iso-8601=seconds)
          echo "Checking commits since: $since"

          # 過去24時間のコミットを取得（GitHub Actionsボット以外）
          user_commits=$(git log --since="$since" --pretty=format:"%an" | grep -v "github-actions\[bot\]" | wc -l)

          echo "User commits in last 24 hours: $user_commits"

          if [ "$user_commits" -gt 0 ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "Found user commits, proceeding with analysis"
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "No user commits found, skipping analysis"
          fi

  generate-callgraph:
    needs: check-commits
    if: needs.check-commits.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: +./.github/codeql-queries

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: Check CodeQL Analysis Results
        run: |
          echo "=== CHECKING CODEQL ANALYSIS RESULTS ==="
          echo "Looking for SARIF files immediately after analysis:"
          find . -name "*.sarif" -type f -exec ls -la {} \;
          find .. -name "*.sarif" -type f -exec ls -la {} \; 2>/dev/null || echo "No SARIF files in parent directory"
          find ../results -name "*.sarif" -type f -exec ls -la {} \; 2>/dev/null || echo "No results directory or SARIF files found"
          echo ""
          echo "Current working directory:"
          pwd
          echo ""
          echo "All files in current directory:"
          find . -type f -name "*" | sort

      - name: Debug CodeQL execution
        run: |
          echo "=== POST-CODEQL DEBUG INFORMATION ==="
          echo "Current directory contents:"
          ls -la .
          echo ""
          echo "Looking for all SARIF files in various locations:"
          find . -name "*.sarif" -type f 2>/dev/null | head -20
          find .. -name "*.sarif" -type f 2>/dev/null | head -20
          find ../results -name "*.sarif" -type f 2>/dev/null | head -20
          echo ""
          echo "Checking if our custom query file exists:"
          ls -la .github/codeql-queries/callgraph.ql
          ls -la .github/codeql-queries/qlpack.yml
          echo ""
          echo "Custom query content preview:"
          head -20 .github/codeql-queries/callgraph.ql
          echo ""
          echo "qlpack.yml content:"
          cat .github/codeql-queries/qlpack.yml



      - name: Create temporary package.json for script dependencies
        run: |
          mkdir -p .github/temp
          cd .github/temp
          cat > package.json << 'EOF'
          {
            "name": "callgraph-generator",
            "version": "1.0.0",
            "type": "commonjs",
            "dependencies": {
              "cytoscape": "^3.29.2"
            }
          }
          EOF

      - name: Install script dependencies
        run: |
          cd .github/temp
          npm install

      - name: Wait for CodeQL results
        run: sleep 10

      - name: Find and process CodeQL results
        run: |
          echo "Looking for CodeQL SARIF files..."

          # GitHub Actionsの結果ディレクトリを確認
          if [ -d "../results" ]; then
            echo "Found results directory"
            find ../results -name "*.sarif" -type f | head -10
          fi

          # 現在のディレクトリも確認
          find . -name "*.sarif" -type f | head -10

          # CodeQLの結果ファイルを探す（すべてのSARIFファイルをチェック）
          sarif_file=""
          echo "=== SEARCHING FOR ALL SARIF FILES ==="
          for dir in . .. ../results; do
            if [ -d "$dir" ]; then
              echo "Checking directory: $dir"
              for file in $(find "$dir" -name "*.sarif" -type f 2>/dev/null); do
                echo "Found SARIF file: $file"
                echo "File size: $(stat -c%s "$file" 2>/dev/null || echo "unknown") bytes"

                # ファイル内容をチェック
                if grep -q "javascript/function-call-graph\|callgraph" "$file" 2>/dev/null; then
                  echo "✓ Contains callgraph-related content"
                  sarif_file="$file"
                  break 2
                else
                  echo "✗ No callgraph content found"
                  echo "  First few rules in this SARIF:"
                  grep -o '"id":"[^"]*"' "$file" | head -10 || echo "  No rules found"
                  echo "  Checking for callgraph results in run.results:"
                  if grep -q '"message".*"->"' "$file" 2>/dev/null; then
                    echo "  ✓ Found arrow-formatted messages - treating as callgraph file"
                    sarif_file="$file"
                    break 2
                  fi
                fi
              done
            fi
          done

          # すべてのSARIFファイルをチェックしても見つからない場合はエラーで終了
          if [ -z "$sarif_file" ]; then
            echo "=== ERROR: NO CALLGRAPH-SPECIFIC SARIF FOUND ==="
            echo "This indicates one of the following critical issues:"
            echo "1. CodeQL callgraph query was not properly configured"
            echo "2. CodeQL callgraph query failed to execute"
            echo "3. CodeQL callgraph query executed but found no results"
            echo "4. SARIF file format is not as expected"
            echo ""
            echo "Available SARIF files found:"
            for dir in . .. ../results; do
              if [ -d "$dir" ]; then
                echo "Directory: $dir"
                find "$dir" -name "*.sarif" -type f -exec echo "  {}" \; 2>/dev/null || echo "  No SARIF files"
              fi
            done
            echo ""
            echo "*** STOPPING WORKFLOW - CALLGRAPH QUERY NOT WORKING ***"
            exit 1
          fi

          # SARIFファイルパスを環境変数に保存
          echo "SARIF_FILE=$sarif_file" >> $GITHUB_ENV

          if [ -n "$sarif_file" ]; then
            echo "Using SARIF file: $sarif_file"
            echo "File size: $(stat -c%s "$sarif_file" 2>/dev/null || echo "unknown") bytes"

            # # SARIFファイル全体をダンプ（サイズが小さい場合のみ）
            # file_size=$(stat -c%s "$sarif_file" 2>/dev/null || echo "0")
            # if [ "$file_size" -lt 102400 ]; then  # 100KB未満の場合
            #   echo "=== COMPLETE SARIF FILE DUMP ==="
            #   cat "$sarif_file"
            #   echo "=== END COMPLETE SARIF DUMP ==="
            # else
            #   echo "=== SARIF file content preview (first 100 lines) ==="
            #   head -100 "$sarif_file"
            #   echo "=== End SARIF preview ==="
            # fi

            # SARIFファイルからカスタムクエリの結果を抽出してCSVに変換
            node -e "
              const fs = require('fs');
              try {
                console.log('=== DETAILED SARIF ANALYSIS ===');
                const sarif = JSON.parse(fs.readFileSync('$sarif_file', 'utf8'));
                const results = [];

                console.log('SARIF structure:', {
                  hasRuns: !!sarif.runs,
                  runsLength: sarif.runs ? sarif.runs.length : 0,
                  version: sarif.version || 'unknown',
                  schema: sarif.\$schema || 'unknown'
                });

                // SARIFファイル全体をダンプ（デバッグ用）
                // console.log('=== COMPLETE SARIF JSON DUMP ===');
                // console.log(JSON.stringify(sarif, null, 2));
                // console.log('=== END SARIF JSON DUMP ===');

                if (sarif.runs && sarif.runs.length > 0) {
                  sarif.runs.forEach((run, runIndex) => {
                    console.log('=== RUN', runIndex, 'ANALYSIS ===');
                    console.log('Run', runIndex, 'basic info:', {
                      hasResults: !!run.results,
                      resultsLength: run.results ? run.results.length : 0,
                      hasTool: !!run.tool,
                      hasDriver: !!(run.tool && run.tool.driver),
                      hasRules: !!(run.tool && run.tool.driver && run.tool.driver.rules)
                    });

                    // ツールとドライバーの詳細情報
                    if (run.tool) {
                      console.log('Tool info:', {
                        driverName: run.tool.driver ? run.tool.driver.name : 'no driver',
                        driverVersion: run.tool.driver ? run.tool.driver.version : 'no version',
                        hasRules: run.tool.driver ? !!run.tool.driver.rules : false,
                        rulesCount: run.tool.driver && run.tool.driver.rules ? run.tool.driver.rules.length : 0
                      });

                      // ルールの詳細情報
                      if (run.tool.driver && run.tool.driver.rules) {
                        console.log('Available rules:', run.tool.driver.rules.map(r => ({
                          id: r.id,
                          name: r.name || 'no name',
                          shortDescription: r.shortDescription ? r.shortDescription.text : 'no description'
                        })));
                      }
                    }

                    // 結果の詳細分析
                    if (run.results) {
                      run.results.forEach((result, resultIndex) => {
                        console.log('=== RESULT', resultIndex, 'DETAILED ANALYSIS ===');
                        console.log('Full result object:', JSON.stringify(result, null, 2));

                        console.log('Result basic info:', {
                          ruleId: result.ruleId,
                          level: result.level,
                          hasMessage: !!result.message,
                          messageText: result.message ? result.message.text : 'no message',
                          hasLocations: !!result.locations,
                          locationsCount: result.locations ? result.locations.length : 0,
                          hasCodeFlows: !!result.codeFlows,
                          codeFlowsCount: result.codeFlows ? result.codeFlows.length : 0
                        });

                        // 特にコールグラフ関連のルールかチェック
                        const isCallgraphRule = result.ruleId && (
                          result.ruleId.includes('callgraph') ||
                          result.ruleId.includes('function-call-graph') ||
                          result.ruleId.includes('javascript/function-call-graph') ||
                          result.ruleId.includes('call-graph')
                        );
                        console.log('Is callgraph rule:', isCallgraphRule);

                        if (result.message && result.message.text) {
                          const text = result.message.text;
                          console.log('Processing message text:', text);

                          // 'caller -> callee' の形式を期待
                          let cleanText = text;

                          // メッセージから矢印形式を抽出
                          if (text.includes(' -> ')) {
                            // (at file:line:col) の部分を除去
                            if (text.includes(' (at ')) {
                              cleanText = text.substring(0, text.indexOf(' (at '));
                            }
                            results.push(cleanText);
                            console.log('*** FOUND CALL RELATIONSHIP:', cleanText);
                          } else if (text.includes(' (at ')) {
                            // (at file:line:col) の前の部分をチェック
                            const beforeLocation = text.substring(0, text.indexOf(' (at '));
                            if (beforeLocation.includes(' -> ')) {
                              results.push(beforeLocation);
                              console.log('*** FOUND CALL RELATIONSHIP (before location):', beforeLocation);
                            } else {
                              console.log('*** NO ARROW FOUND in before-location text:', beforeLocation);
                            }
                          } else {
                            console.log('*** NO ARROW FOUND in:', text);
                          }
                        }
                      });
                    }
                  });
                }

                console.log('=== FINAL ANALYSIS RESULTS ===');
                console.log('Total call relationships found:', results.length);

                if (results.length === 0) {
                  console.log('*** ERROR: NO CALL GRAPH DATA FOUND ***');
                  console.log('This indicates one of the following issues:');
                  console.log('1. CodeQL callgraph query was not executed');
                  console.log('2. CodeQL callgraph query found no results');
                  console.log('3. SARIF file does not contain callgraph query results');
                  console.log('4. Message format is different than expected');

                  // 詳細なエラー情報を保存
                  const errorInfo = {
                    timestamp: new Date().toISOString(),
                    error: 'No call graph relationships found in SARIF',
                    sarifFile: '$sarif_file',
                    sarifStructure: {
                      version: sarif.version,
                      runsCount: sarif.runs ? sarif.runs.length : 0,
                      totalResults: sarif.runs ? sarif.runs.reduce((acc, run) => acc + (run.results ? run.results.length : 0), 0) : 0,
                      allRuleIds: sarif.runs ? sarif.runs.flatMap(run =>
                        run.results ? run.results.map(r => r.ruleId) : []
                      ) : [],
                      allMessages: sarif.runs ? sarif.runs.flatMap(run =>
                        run.results ? run.results.map(r => r.message ? r.message.text : 'no message') : []
                      ) : []
                    },
                    completeSarif: sarif
                  };
                  fs.writeFileSync('callgraph-error-detail.json', JSON.stringify(errorInfo, null, 2));

                  console.log('*** STOPPING WORKFLOW - NO CALL GRAPH DATA ***');
                  process.exit(1);
                }

                // CSVヘッダーとデータを出力
                let csv = 'caller,callee\n';
                results.forEach(result => {
                  const parts = result.split(' -> ');
                  if (parts.length === 2) {
                    csv += parts[0].trim() + ',' + parts[1].trim() + '\n';
                  }
                });

                fs.writeFileSync('callgraph.csv', csv);
                console.log('Generated CSV with ' + results.length + ' call relationships');

                // デバッグ用に詳細情報も保存
                const debugInfo = {
                  timestamp: new Date().toISOString(),
                  sarifFile: '$sarif_file',
                  totalRuns: sarif.runs ? sarif.runs.length : 0,
                  totalResults: results.length,
                  results: results,
                  completeSarif: sarif
                };
                fs.writeFileSync('sarif-debug.json', JSON.stringify(debugInfo, null, 2));

              } catch (error) {
                console.error('*** FATAL ERROR: Failed to process SARIF file ***');
                console.error('Error message:', error.message);
                console.error('Stack trace:', error.stack);
                console.error('SARIF file path:', '$sarif_file');

                // エラー情報を保存してワークフローを停止
                const errorInfo = {
                  timestamp: new Date().toISOString(),
                  error: error.message,
                  stack: error.stack,
                  sarifFile: '$sarif_file'
                };
                fs.writeFileSync('sarif-fatal-error.json', JSON.stringify(errorInfo, null, 2));

                // ワークフローをエラーで終了
                process.exit(1);
              }
            "
          else
            echo "ERROR: No SARIF file found"
            echo "This indicates CodeQL analysis failed or no callgraph query results were generated"
            echo "Directory contents:"
            ls -la . .. 2>/dev/null || echo "Cannot list directories"
            exit 1
          fi

      - name: Generate HTML graph
        run: |
          echo "=== Debug: CSV file content ==="
          if [ -f "callgraph.csv" ]; then
            echo "CSV file exists, content:"
            cat callgraph.csv
            echo "=== End CSV content ==="

            # CSVが空の場合はエラー
            line_count=$(wc -l < callgraph.csv)
            if [ "$line_count" -le 1 ]; then
              echo "ERROR: CSV file is empty (only header or no data)"
              echo "This indicates no call relationships were found in the SARIF file"
              echo "Check the CodeQL query and SARIF processing logic"
              exit 1
            fi
          else
            echo "ERROR: CSV file does not exist"
            echo "This indicates SARIF processing failed"
            exit 1
          fi

          echo "=== Running HTML conversion ==="
          if node .github/scripts/org-convert-to-html.cjs; then
            echo "HTML conversion successful"
            if [ -f "callgraph-org.html" ]; then
              echo "HTML file generated in current directory, size: $(stat -c%s callgraph-org.html 2>/dev/null || echo "unknown") bytes"
            else
              echo "ERROR: HTML file not found after conversion"
              exit 1
            fi
          else
            echo "ERROR: HTML conversion failed, exit code: $?"
            exit 1
          fi

          # デバッグのため、生成されたファイルを一覧表示
          echo "=== Generated files in current directory ==="
          ls -la *.csv *.json *.html 2>/dev/null || echo "No generated files found"

      - name: Copy files to generated-docs and commit results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "github-actions[bot]"

          # generated-docsディレクトリが存在しない場合は作成
          mkdir -p generated-docs

          # すべての生成されたファイルをgenerated-docsにコピー（デバッグのため）
          echo "=== Copying all generated files to generated-docs ==="

          # CSVファイルが存在することを確認してコピー
          # if [ -f "callgraph.csv" ]; then
          #   cp callgraph.csv generated-docs/callgraph.csv
          #   echo "Copied callgraph.csv ($(wc -l < callgraph.csv) lines)"
          # else
          #   echo "ERROR: callgraph.csv not found in current directory"
          #   exit 1
          # fi

          # HTMLファイルが存在することを確認してコピー
          if [ -f "callgraph-org.html" ]; then
            cp callgraph-org.html generated-docs/callgraph-org.html
            echo "Copied callgraph-org.html ($(stat -c%s callgraph-org.html 2>/dev/null || echo "unknown") bytes)"
          else
            echo "ERROR: callgraph-org.html not found in current directory"
            exit 1
          fi

          # JSON デバッグファイルをコピー
          # if [ -f "sarif-debug.json" ]; then
          #   cp sarif-debug.json generated-docs/sarif-debug.json
          #   echo "Copied sarif-debug.json"
          # fi

          # if [ -f "sarif-error.json" ]; then
          #   cp sarif-error.json generated-docs/sarif-error.json
          #   echo "Copied sarif-error.json"
          # fi

          # SARIFファイルの情報を保存（ファイルサイズが小さい場合のみ）
          # if [ -n "$SARIF_FILE" ] && [ -f "$SARIF_FILE" ]; then
          #   file_size=$(stat -c%s "$SARIF_FILE" 2>/dev/null || echo "0")
          #   if [ "$file_size" -lt 1048576 ]; then  # 1MB未満の場合のみ
          #     cp "$SARIF_FILE" generated-docs/latest.sarif
          #     echo "Copied SARIF file (size: $file_size bytes)"
          #   else
          #     echo "SARIF file too large (size: $file_size bytes), creating summary instead"
          #     # サイズ情報とファイル名のみ保存
          #     echo "SARIF file: $SARIF_FILE" > generated-docs/sarif-info.txt
          #     echo "Size: $file_size bytes" >> generated-docs/sarif-info.txt
          #     echo "Date: $(date)" >> generated-docs/sarif-info.txt
          #   fi
          # fi

          # デバッグ情報を保存
          # echo "=== Debug Information ===" > generated-docs/debug-info.txt
          # echo "Workflow run: ${{ github.run_id }}" >> generated-docs/debug-info.txt
          # echo "Run number: ${{ github.run_number }}" >> generated-docs/debug-info.txt
          # echo "Timestamp: $(date)" >> generated-docs/debug-info.txt
          # echo "Event: ${{ github.event_name }}" >> generated-docs/debug-info.txt
          # echo "Branch: ${{ github.ref_name }}" >> generated-docs/debug-info.txt
          # echo "" >> generated-docs/debug-info.txt
          # echo "Files in current directory:" >> generated-docs/debug-info.txt
          # ls -la . >> generated-docs/debug-info.txt
          # echo "" >> generated-docs/debug-info.txt
          # echo "CSV file status:" >> generated-docs/debug-info.txt
          # if [ -f "generated-docs/callgraph.csv" ]; then
          #   echo "CSV exists in generated-docs, line count: $(wc -l < generated-docs/callgraph.csv)" >> generated-docs/debug-info.txt
          #   echo "CSV size: $(stat -c%s generated-docs/callgraph.csv 2>/dev/null || echo "unknown") bytes" >> generated-docs/debug-info.txt
          #   echo "First 5 lines of CSV:" >> generated-docs/debug-info.txt
          #   head -5 generated-docs/callgraph.csv >> generated-docs/debug-info.txt
          # else
          #   echo "ERROR: CSV does not exist in generated-docs" >> generated-docs/debug-info.txt
          # fi
          # echo "" >> generated-docs/debug-info.txt
          # echo "HTML file status:" >> generated-docs/debug-info.txt
          # if [ -f "generated-docs/callgraph.html" ]; then
          #   echo "HTML exists in generated-docs, size: $(stat -c%s generated-docs/callgraph.html 2>/dev/null || echo "unknown") bytes" >> generated-docs/debug-info.txt
          #   echo "HTML file first few lines:" >> generated-docs/debug-info.txt
          #   head -10 generated-docs/callgraph.html >> generated-docs/debug-info.txt
          # else
          #   echo "ERROR: HTML does not exist in generated-docs" >> generated-docs/debug-info.txt
          # fi

          # ファイルをステージングに追加
          git add generated-docs/

          # 変更があるかチェック
          if ! git diff --cached --quiet; then
            # コミットメッセージの内容を変数に保存
            html_size=$(stat -c%s generated-docs/callgraph.html 2>/dev/null || echo "unknown")

            git commit -m "Update call graph analysis [automated] - HTML: ${html_size} bytes, Run: ${{ github.run_id }}"

            git push
            echo "Call graph files updated and pushed successfully"

            # 成功時の詳細情報を表示
            echo "=== Files committed ==="
            git show --name-only HEAD
          else
            echo "No changes to commit"
          fi
